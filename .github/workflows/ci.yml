name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, "claude/**"]
  pull_request:
    branches: [main, develop]

jobs:
  # ================================
  # BUILD & TEST
  # ================================
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run ESLint
      - name: Lint code
        run: npm run lint
        continue-on-error: true # Continue even if linting fails

      # Build project
      - name: Build project
        run: npm run build
        env:
          # Provide dummy values for build-time env vars
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || 'pk_test_dummy' }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY || 'sk_test_dummy' }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY || 're_dummy' }}
          NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL || 'https://www.tanse.fr' }}

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .next/
          retention-days: 7

  # ================================
  # E2E TESTS (PLAYWRIGHT)
  # ================================
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 15

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Install Playwright browsers
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      # Run E2E tests
      - name: Run Playwright tests
        run: npm run test:e2e
        env:
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || 'pk_test_dummy' }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY || 'sk_test_dummy' }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY || 're_dummy' }}
          NEXT_PUBLIC_BASE_URL: 'http://localhost:3000'

      # Upload test results
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # ================================
  # LIGHTHOUSE PERFORMANCE
  # ================================
  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'
    timeout-minutes: 10

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Build project
      - name: Build project
        run: npm run build
        env:
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || 'pk_test_dummy' }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY || 'sk_test_dummy' }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY || 're_dummy' }}
          NEXT_PUBLIC_BASE_URL: 'https://www.tanse.fr'

      # Start production server in background
      - name: Start production server
        run: npm run start &
        env:
          PORT: 3000

      # Wait for server to be ready
      - name: Wait for server
        run: npx wait-on http://localhost:3000 --timeout 30000

      # Run Lighthouse CI
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            http://localhost:3000/
            http://localhost:3000/forfaits
            http://localhost:3000/entreprise
          uploadArtifacts: true
          temporaryPublicStorage: true

  # ================================
  # SECURITY AUDIT
  # ================================
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # Run npm audit
      - name: Run npm audit
        run: npm audit --production
        continue-on-error: true # Don't fail build on audit warnings

      # Check for known vulnerabilities
      - name: Check dependencies
        run: npm outdated || true

  # ================================
  # TYPE CHECK
  # ================================
  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run TypeScript compiler
      - name: Type check
        run: npx tsc --noEmit

  # ================================
  # DEPLOYMENT STATUS
  # ================================
  deployment-status:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [build-and-test, e2e-tests, type-check]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deployment ready
        run: |
          echo "âœ… All checks passed!"
          echo "ðŸš€ Ready for deployment to production"
